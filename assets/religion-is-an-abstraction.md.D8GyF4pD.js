import{_ as e,c as t,o as a,M as i}from"./chunks/framework.Dt16nE2a.js";const u=JSON.parse('{"title":"Religion is an Abstraction ✝","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"religion-is-an-abstraction.md","filePath":"religion-is-an-abstraction.md"}'),s={name:"religion-is-an-abstraction.md"},n=i('<h1 id="religion-is-an-abstraction-✝" tabindex="-1">Religion is an Abstraction ✝ <a class="header-anchor" href="#religion-is-an-abstraction-✝" aria-label="Permalink to &quot;Religion is an Abstraction ✝&quot;">​</a></h1><p>In software, there is the concept of abstraction.</p><p>Abstraction is the process of exposing only the essential features of a complex system while hiding its internal implementation details, allowing developers to interact with it in a simplified way.</p><p>Low level abstraction is closer to the actual electrical activity of the semiconductors.</p><p>Machine language is the lowest level of abstraction a programmer can get.</p><p>As you go up in levels of abstraction, the connection to physical reality is lost, but ease of human understanding is gained.</p><p>Abstracted programming languages use actual english words.</p><p>Religion serves a similar purpose.</p><p>Religious abstraction seeks to provide a human-readable framework for understanding the divine.</p><p>At the base is God, the Dao, the Source, Consciousness, the Holy Spirit.</p><p>Then levels of abstraction are built upon it.</p><p>Similar to the C languages in software, there are low level abstraction religions- Zen, Daoism, Non-duality, etc.</p><p>Then, similar to Python in software, there are high level abstractions that allow more people to access and understand the underlying mechanisms- Christianity, Islam, etc.</p><p>They all seek to interact and connect with the same base system, but they can provide varying degrees of &#39;readability&#39; to each person based upon their needs.</p>',14),o=[n];function r(l,c,p,h,d,g){return a(),t("div",null,o)}const b=e(s,[["render",r]]);export{u as __pageData,b as default};
